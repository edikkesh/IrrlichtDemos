#include <irrlicht.h>
#include "main.h"
#include "irrXML.h"
#include "main_menu.h"
#include "clear_scene.h"
#include "load_map.h"

using namespace irr;
using namespace core;
using namespace scene;
using namespace video;
using namespace io;
using namespace gui;



class MyEventReceiver : public IEventReceiver
{
public:
   virtual bool OnEvent(const SEvent &event)
   {
   // ------------------------------------- key press events ------------------------------------
   if (event.EventType == irr::EET_KEY_INPUT_EVENT && !event.KeyInput.PressedDown)
   {
         switch(event.KeyInput.Key)
         {

        //create screenshot
        case irr::KEY_F9:
        {
        //get video::IImage from the last rendered frame
        video::IImage* image = device->getVideoDriver()->createScreenShot();

        //construct a filename, consisting of local time and file extension
        irr::c8 filename[32];
        snprintf(filename, 32, "PhotoAlbum/pic_%u.jpg", device->getTimer()->getTime());
        //write screenshot to file
        device->getVideoDriver()->writeImageToFile(image, filename);
        screenShot_fader->fadeIn(300);
        printf("[INFO] Screenshot saved in PhotoAlbum folder.\n");

        }
         return true;

        // user pressed the Escape key
         case irr::KEY_ESCAPE:
        {
         if(isInGame==1)
         {
           //printf("[INFO] Pressed Escape. Is in game.\n");

           isInGame=0;
           clearAllScene();
           loadMainMenu();
           isInGame=0;

         } else {
                 //printf("[INFO] Pressed Escape. Not in game.\n");

                 }
        }
        return true;

         default:
            break;

         }
   }

   // ------------------------------------- mouse click events ------------------------------------
   if (event.EventType == EET_GUI_EVENT)
                {
                        s32 id = event.GUIEvent.Caller->getID();
                        //call a pointer to GUI Environment
                        IGUIEnvironment* guienv = device->getGUIEnvironment();


                        switch(event.GUIEvent.EventType)
                        {

                        case EGET_BUTTON_CLICKED:
                                switch(id)
                                {


                                        //show level chooser
                                        case 101:
                                        {
                                            singleplayer_window->setVisible(true);
                                            IGUIElement *windowParent = singleplayer_window->getParent();
                                            windowParent->bringToFront(singleplayer_window);

                                        }
                                        return true;


                                        //show credits window
                                        case 102:
                                        {
                                          //create a window
                                          credits_window = guienv->addWindow(rect<s32>(200,screenResY/5,screenResX-200,screenResY-100), true, L"");

                                          guienv->addStaticText(L"Programming:", rect<s32>(30,30,800,60), false, false, credits_window);
                                          guienv->addStaticText(L"Niscoveanu Andrei", rect<s32>(10,70,800,100), false, false, credits_window);

                                          guienv->addStaticText(L"Graphics:", rect<s32>(30,110,800,140), false, false, credits_window);
                                          guienv->addStaticText(L"Niscoveanu Andrei", rect<s32>(10,150,800,180), false, false, credits_window);

                                          guienv->addStaticText(L"Audio:", rect<s32>(30,190,800,220), false, false, credits_window);
                                          guienv->addStaticText(L"Niscoveanu Andrei", rect<s32>(10,230,800,260), false, false, credits_window);

                                        }
                                        return true;


                                        //quit game
                                        case 103:
                                        {
                                        clearAllScene();
                                        device->closeDevice();
                                        }
                                        return true;


                                        //load a game level
                                        case 104:
                                        {
                                          mapName = maps_list->getListItem(maps_list->getSelected());
                                          singleplayer_window_on = 0;
                                          isPleaseWaitImg=1;

                                        }
                                        return true;




                                        //'load map' "Cancel" button (hides the 'load map' window)
                                        case 105:
                                        {
                                          singleplayer_window->setVisible(false);

                                        }
                                        return true;




                                }
                      default:
                        return false;

                        break;
                        }

                }



    return false;
   }
};


// -------------------------------------- MAIN -----------------------------------


int main()
{

    //First, create a NULL Irrlicht device, read the configuration file,
    //then create a DirectX Irrlicht device using the retrieved variables

   IrrlichtDevice* deviceNULL = createDevice(video::EDT_NULL);
   video::E_DRIVER_TYPE driverType;
   driverType = video::EDT_OPENGL;

   //read the configuration file
   irr::io::IXMLReader* xml  = deviceNULL->getFileSystem()->createXMLReader("data/logic/config/config.xml");


   if (xml==0)
          {
          printf("[ERROR 002] - file config.xml was NOT found in /data/logic/config/ directory\n");
          }else{
                printf("[INFO] - file config.xml was found in /data/logic/config/ directory\n");
                }

   while(xml && xml->read())
   {  //get video Information
      if (core::stringw("video") == xml->getNodeName())
      {
      screenResX  = xml->getAttributeValueAsInt(L"screenResX");
      screenResY  = xml->getAttributeValueAsInt(L"screenResY");
      wfullscreen = xml->getAttributeValueAsInt(L"wfullscreen");
      }

      //get detail Information
      if (core::stringw("detail") == xml->getNodeName())
      {
      bloom          = xml->getAttributeValueAsInt(L"bloom");
      farView        = xml->getAttributeValueAsInt(L"farView");
      }

      //get audio Information
      if (core::stringw("audio") == xml->getNodeName())
      {
      musicOn = xml->getAttributeValueAsInt(L"musicOn");
      sfxOn   = xml->getAttributeValueAsInt(L"sfxOn");
      musicVol= xml->getAttributeValueAsInt(L"musicVol");
      sfxVol  = xml->getAttributeValueAsInt(L"sfxVol");
      }

      //get debug Information
      if (core::stringw("debug") == xml->getNodeName())
      {
      skipIntro     = xml->getAttributeValueAsInt(L"skipIntro");
      collisions    = xml->getAttributeValueAsInt(L"collisions");
      }

   }
    printf("[INFO] - Configuration file parsed. See above for errors (if any).\n");

    deviceNULL->closeDevice();

// Initialise Irrlicht device.

MyEventReceiver eventReceiver;

irr::SIrrlichtCreationParameters device_settings;
device_settings.DriverType = video::EDT_OPENGL;
device_settings.Bits = 32;
device_settings.AntiAlias= true;
device_settings.Stencilbuffer= false;
device_settings.Fullscreen = wfullscreen;
device_settings.Vsync = false;
device_settings.WindowSize = core::dimension2d<s32>(screenResX, screenResY);
device_settings.EventReceiver = &eventReceiver;
device = createDeviceEx(device_settings);


	if (!device)
		return 1;

	device->setWindowCaption(L"cookieMaze v0.1");

	IVideoDriver* driver = device->getVideoDriver();
	ISceneManager* smgr = device->getSceneManager();
	IGUIEnvironment* guienv = device->getGUIEnvironment();

    //load main menu
	loadMainMenu();

	smgr->addCameraSceneNode(0, vector3df(0,30,-40), vector3df(0,5,0));

	//create FPS
	int lastFPS = -1;


	while(device->run())
	{

		driver->beginScene(true, true, SColor(255,100,101,140));

		smgr->drawAll();


        if (isPleaseWaitImg==1){driver->draw2DImage(pleaseWaitImg,core::rect<s32>(0,0,screenResX,screenResY), core::rect<s32>(0,0,1024,768), 0,0,false);}
		if (isBackImg==1)      {driver->draw2DImage(mainMenuGUI,core::rect<s32>(0,0,screenResX,screenResY), core::rect<s32>(0,0,1024,768), 0,0,false);}



		guienv->drawAll();

		driver->endScene();

		//update FPS
		int fps = driver->getFPS();
        if (lastFPS != fps)
        {
           core::stringw str = L"cookieMaze [";
           str += driver->getName();
           str += "] FPS:";
           str += fps;
           device->setWindowCaption(str.c_str());
           lastFPS = fps;
        }



        // this means that we need to load a map
		if (isPleaseWaitImg==1)
        {
        clearAllScene();
        loadMap(mapName);
        isPleaseWaitImg = 0;
        }else{}



        // if we are playing a level, and we are not in the main menu, then:
        if(isInGame==1){

        // start the time counter
        timerSecValue = device->getTimer()->getTime();

                // every second increment the seconds :p
                if ((timeThen + 1000) < timerSecValue)
                {
                  timerActualSec = timerActualSec-1;

                  if (timerActualSec <= 0){timerActualSec = 59; timerActualMin = timerActualMin - 1;} else {}
                  if (timerActualMin <= -1){printf("[INFO] Time is up!\n"); timerActualSec = 0; timerActualMin = 0;} else {}
                  timeThen = timerSecValue;
                }

        core::stringw timerSecValueFormated = L"";
        timerSecValueFormated += timerActualSec;
        timerSec->setText(timerSecValueFormated.c_str());

        core::stringw timerMinValueFormated = L"";
        timerMinValueFormated += timerActualMin;
        timerMinValueFormated += L":";
        timerMin->setText(timerMinValueFormated.c_str());



        // check for collisions with the bonus nodes
        bonusNode = smgr->getSceneNodeFromId(33);
        if (bonusNode)
        {


        if (playerCollisionBox->getTransformedBoundingBox().intersectsWithBox(bonusNode->getTransformedBoundingBox()))
           {
            printf("[INFO] Picked up a bonus!\n");
            bonusNode->setVisible(false);
            smgr->addToDeletionQueue(bonusNode);
            //give ten point to the player

            core::stringw scoreValueFormated = L"";
            scoreValuePoints = scoreValuePoints + 10;
            scoreValueFormated += scoreValuePoints;
            scoreValue->setText(scoreValueFormated.c_str());


           } else{ /*there is no collision with a bonus node happening */ }

        } else { /*there are no more bonus nodes to pick up */ printf("[INFO] You found all the bonus items!\n");}



        //if the player falls out of the map, put him back
        if(playaCamera->getAbsolutePosition().Y<=-1000)
        {
        playaCamera->setPosition(core::vector3df(0,2000,0));
        }else{
             //do nothing
             }
        }else{}



	}


	device->drop();

	return 0;
}
